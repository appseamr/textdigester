# TextDigester

TextDigester is a self-contained Java library that impelements several text summarization approaches relying on (and thus imporing) the following libraries:

* Freeling (v 4.0): http://nlp.cs.upc.edu/freeling/  
* GATE (v 8.3): https://gate.ac.uk/  
* Deeplearning4j (v 0.7.2): https://deeplearning4j.org/  


TextDigester is structured as a Maven project working with Java 1.8.  

In order to import text digester in your program:

* Clone and compile this Maven project  
* Download the resource folder and the property file of TextDigester from http://www.backingdata.org/textdigester/TEXTDIGESTER_RESOURCES_v_0_0_2.tar.gz  
* Modify the property file of TextDigester by specifying the local path to the resource folder of TextDigester (downloaded in the previous tar.gz file) and the local path of your GATE installation  

Before using TextDigester library methods, remember to set the path to the property file of TextDigester by means of the following code:   
```javascript
edu.upf.taln.textdigester.setting.PropertyManager.setPropertyFilePath("/local/path/to/TextDigesterConfig.properties");
```  

The following Java file is an example code of how TextDigester can be used to create the summary of a text:  
```javascript
public class CoreExample {
	
	private static final Logger logger = LoggerFactory.getLogger(CoreExample.class);
	
	public static void main(String[] args) {
		/* Load property file */
		PropertyManager.setPropertyFilePath("/home/francesco/Desktop/NLP_HACHATHON_4YFN/TextDigesterConfig.properties");

		String myText = "Here you can load the text to summarize";
		LangENUM lang = LangENUM.Catalan; // Supported languages: Catalan, English, Spanish
		TDDocument myDoc = FlProcessor.generateDocumentFromFreeText(myText, "Name_of_the_docment_or_null_to_autogenerate", lang);
		
		/* Try different summarization methods that return a map with key a sentence Annotation instance and value the relevance score assigned to that sentence List of summarization methods available - in the class: edu.upf.taln.textdigester.summarizer.SummarizationMethodENUM */
		
		try {
			// Summarization method: Centroid_TFIDF
			Map<Annotation, Double> orderedSentences_Centroid_TFIDF = ConfigurableSummarizer.summarize(myDoc, lang, SummarizationMethodENUM.Centroid_TFIDF);
			
			// Summarization method: Centroid_EMBED
			Map<Annotation, Double> orderedSentences_Centroid_EMBED = ConfigurableSummarizer.summarize(myDoc, lang, SummarizationMethodENUM.Centroid_EMBED);
			
			// Summarization method: TextRank_TFIDF
			Map<Annotation, Double> orderedSentences_TextRank_TFIDF = ConfigurableSummarizer.summarize(myDoc, lang, SummarizationMethodENUM.TextRank_TFIDF);
			
			// Summarization method: TextRank_EMBED
			Map<Annotation, Double> orderedSentences_TextRank_EMBED = ConfigurableSummarizer.summarize(myDoc, lang, SummarizationMethodENUM.TextRank_EMBED);
			
			// Summarization method: FirstSim
			Map<Annotation, Double> orderedSentences_FirstSim = ConfigurableSummarizer.summarize(myDoc, lang, SummarizationMethodENUM.FirstSim);
			
			// Summarization method: NEScore
			Map<Annotation, Double> orderedSentences_NEScore = ConfigurableSummarizer.summarize(myDoc, lang, SummarizationMethodENUM.NEScore);
			
			// Summarization method: SemScore
			Map<Annotation, Double> orderedSentences_SemScore = ConfigurableSummarizer.summarize(myDoc, lang, SummarizationMethodENUM.SemScore);
			
			// Print the text of one of the summaries previously generated
			double summaryPercentageOfOriginalText = 20d; // From 0d to 100d
			Map<Annotation, Double> orderedSentences_SemScore_top20perc = SummaryUtil.getSummary(orderedSentences_SemScore, myDoc, summaryPercentageOfOriginalText);
			System.out.println("SUMMARY GENERATED BY SUMMARIZATION METHOD SemScore WITH SIZE 20% OF THE ORIGINAL DOCUMENT: \n " + SummaryUtil.getStringSummaryText(orderedSentences_SemScore_top20perc, myDoc));
			
			
		} catch (TextDigesterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
```  



